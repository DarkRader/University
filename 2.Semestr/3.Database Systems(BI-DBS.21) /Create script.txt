-- odeberu pokud existuje funkce na oodebrání tabulek a sekvencí
DROP FUNCTION IF EXISTS remove_all();

-- vytvořím funkci která odebere tabulky a sekvence
-- chcete také umět psát PLSQL? Zapište si předmět BI-SQL ;-)
CREATE or replace FUNCTION remove_all() RETURNS void AS $$
DECLARE
    rec RECORD;
    cmd text;
BEGIN
    cmd := '';

    FOR rec IN SELECT
            'DROP SEQUENCE ' || quote_ident(n.nspname) || '.'
                || quote_ident(c.relname) || ' CASCADE;' AS name
        FROM
            pg_catalog.pg_class AS c
        LEFT JOIN
            pg_catalog.pg_namespace AS n
        ON
            n.oid = c.relnamespace
        WHERE
            relkind = 'S' AND
            n.nspname NOT IN ('pg_catalog', 'pg_toast') AND
            pg_catalog.pg_table_is_visible(c.oid)
    LOOP
        cmd := cmd || rec.name;
    END LOOP;

    FOR rec IN SELECT
            'DROP TABLE ' || quote_ident(n.nspname) || '.'
                || quote_ident(c.relname) || ' CASCADE;' AS name
        FROM
            pg_catalog.pg_class AS c
        LEFT JOIN
            pg_catalog.pg_namespace AS n
        ON
            n.oid = c.relnamespace WHERE relkind = 'r' AND
            n.nspname NOT IN ('pg_catalog', 'pg_toast') AND
            pg_catalog.pg_table_is_visible(c.oid)
    LOOP
        cmd := cmd || rec.name;
    END LOOP;

    EXECUTE cmd;
    RETURN;
END;
$$ LANGUAGE plpgsql;
-- zavolám funkci co odebere tabulky a sekvence - Mohl bych dropnout celé schéma a znovu jej vytvořit, použíjeme však PLSQL
select remove_all();


--Remove conflicting tables
--DROP TABLE IF EXISTS adresa CASCADE;
--DROP TABLE IF EXISTS fyzicka_osoba CASCADE;
--DROP TABLE IF EXISTS majitel CASCADE;
--DROP TABLE IF EXISTS mec CASCADE;
--DROP TABLE IF EXISTS organizace CASCADE;
--DROP TABLE IF EXISTS pribeh CASCADE;
--DROP TABLE IF EXISTS pronajem CASCADE;
--DROP TABLE IF EXISTS smlouva CASCADE;
--DROP TABLE IF EXISTS subjekt CASCADE;
--DROP TABLE IF EXISTS zamestanec CASCADE;
--DROP TABLE IF EXISTS zamestanec_pribeh CASCADE;
-- End of removing

CREATE TABLE adresa (
id_adresa SERIAL NOT NULL,
stat VARCHAR(256) NOT NULL,
mesto VARCHAR(256) NOT NULL,
psc INTEGER NOT NULL,
ulica VARCHAR(256) NOT NULL,
cislo INTEGER NOT NULL,
cislo_pokoje INTEGER
);
ALTER TABLE adresa ADD CONSTRAINT pk_adresa PRIMARY KEY (id_adresa);

CREATE TABLE fyzicka_osoba (
id_subjekt INTEGER NOT NULL,
cislo_dokladu SERIAL NOT NULL,
jmeno VARCHAR(256) NOT NULL,
prijmeni VARCHAR(256) NOT NULL
);
ALTER TABLE fyzicka_osoba ADD CONSTRAINT pk_fyzicka_osoba PRIMARY KEY (id_subjekt);
ALTER TABLE fyzicka_osoba ADD CONSTRAINT uc_fyzicka_osoba_cislo_dokladu UNIQUE (cislo_dokladu);

CREATE TABLE majitel (
id_subjekt INTEGER NOT NULL,
moznost_pronajmu VARCHAR(256) NOT NULL CHECK(moznost_pronajmu IN('Ano', 'Ne'))
);
ALTER TABLE majitel ADD CONSTRAINT pk_majitel PRIMARY KEY (id_subjekt);

CREATE TABLE mec (
id_mec SERIAL NOT NULL,
id_subjekt INTEGER NOT NULL,
pojisteni SERIAL NOT NULL,
typ VARCHAR(256) NOT NULL,
hodnota VARCHAR(256) NOT NULL CHECK(hodnota IN('A', 'B', 'C', 'D','E')),
stav VARCHAR(256) NOT NULL CHECK(stav IN('falling apart', 'shabby', 'not bad', 'good', 'very worn out', 'excellent')),
cena INTEGER NOT NULL,
status_pronajmu VARCHAR(256) NOT NULL CHECK(status_pronajmu IN('v_pronajmu', 'neni_v_pronajmu')),
status_prodeje VARCHAR(256) NOT NULL CHECK(status_prodeje IN('v_prodeje', 'neni_v_prodeje')),
hmotnost VARCHAR(256),
delka INTEGER
);
ALTER TABLE mec ADD CONSTRAINT pk_mec PRIMARY KEY (id_mec);
ALTER TABLE mec ADD CONSTRAINT uc_mec_pojisteni UNIQUE (pojisteni);

CREATE TABLE organizace (
id_subjekt INTEGER NOT NULL,
registrace SERIAL NOT NULL,
typ_organizace VARCHAR(256) NOT NULL CHECK(typ_organizace IN('Sole Proprietorship','Partnerships', 'Corporations', 'Limited Liability Company',
'Joint Venture', 'Nonprofit', 'Partnerships', 'Cooperative')),
nazev VARCHAR(256) NOT NULL
);
ALTER TABLE organizace ADD CONSTRAINT pk_organizace PRIMARY KEY (id_subjekt);
ALTER TABLE organizace ADD CONSTRAINT uc_organizace_registrace UNIQUE (registrace);

CREATE TABLE pribeh (
id_mec INTEGER NOT NULL,
datum_nalezu DATE NOT NULL,
zeme_nalezu VARCHAR(256) NOT NULL,
popis TEXT,
datum_vytvareni DATE,
zeme_vytvareni VARCHAR(256),
kym_byl_udelan VARCHAR(256),
kdo_pouzival VARCHAR(256)
);
ALTER TABLE pribeh ADD CONSTRAINT pk_pribeh PRIMARY KEY (id_mec);

CREATE TABLE pronajem (
id_smlouva INTEGER NOT NULL,
akce VARCHAR(256) NOT NULL CHECK(akce IN('museum', 'exhibition','study of the value of weapons', 'thematic lectures',
'study of weapons for historical purposes')),
obdobi_od DATE NOT NULL,
obdobi_do DATE 
);
ALTER TABLE pronajem ADD CONSTRAINT pk_pronajem PRIMARY KEY (id_smlouva);

CREATE TABLE smlouva (
id_smlouva SERIAL NOT NULL,
id_mec INTEGER NOT NULL,
id_subjekt INTEGER NOT NULL,
zamestanec_id_subjekt INTEGER NOT NULL CHECK(zamestanec_id_subjekt != id_subjekt),
datum DATE NOT NULL,
cena INTEGER NOT NULL,
stav_smlouvy VARCHAR(256) NOT NULL CHECK(stav_smlouvy IN('u_klienta', 'priprava', 'v_doprave', 'uzavrena')),
doprava VARCHAR(256) CHECK(doprava IN('ship', 'train', 'courier car', 'plane'))
);
ALTER TABLE smlouva ADD CONSTRAINT pk_smlouva PRIMARY KEY (id_smlouva);

CREATE TABLE subjekt (
id_subjekt SERIAL NOT NULL,
id_adresa INTEGER NOT NULL,
telefonni_cislo INTEGER NOT NULL,
email VARCHAR(256) NOT NULL
);
ALTER TABLE subjekt ADD CONSTRAINT pk_subjekt PRIMARY KEY (id_subjekt);

CREATE TABLE zamestanec (
id_subjekt INTEGER NOT NULL,
cislo_smlouvy SERIAL NOT NULL,
plat INTEGER NOT NULL,
grafik VARCHAR(256)
);
ALTER TABLE zamestanec ADD CONSTRAINT pk_zamestanec PRIMARY KEY (id_subjekt);
ALTER TABLE zamestanec ADD CONSTRAINT uc_zamestanec_cislo_smlouvy UNIQUE (cislo_smlouvy);

CREATE TABLE zamestanec_pribeh (
id_subjekt INTEGER NOT NULL,
id_mec INTEGER NOT NULL
);
ALTER TABLE zamestanec_pribeh ADD CONSTRAINT pk_zamestanec_pribeh PRIMARY KEY (id_subjekt, id_mec);

ALTER TABLE fyzicka_osoba ADD CONSTRAINT fk_fyzicka_osoba_subjekt FOREIGN KEY (id_subjekt) REFERENCES subjekt (id_subjekt) ON DELETE CASCADE;

ALTER TABLE majitel ADD CONSTRAINT fk_majitel_subjekt FOREIGN KEY (id_subjekt) REFERENCES subjekt (id_subjekt) ON DELETE CASCADE;

ALTER TABLE mec ADD CONSTRAINT fk_mec_majitel FOREIGN KEY (id_subjekt) REFERENCES majitel (id_subjekt) ON DELETE CASCADE;

ALTER TABLE organizace ADD CONSTRAINT fk_organizace_subjekt FOREIGN KEY (id_subjekt) REFERENCES subjekt (id_subjekt) ON DELETE CASCADE;

ALTER TABLE pribeh ADD CONSTRAINT fk_pribeh_mec FOREIGN KEY (id_mec) REFERENCES mec (id_mec) ON DELETE CASCADE;

ALTER TABLE pronajem ADD CONSTRAINT fk_pronajem_smlouva FOREIGN KEY (id_smlouva) REFERENCES smlouva (id_smlouva) ON DELETE CASCADE;

ALTER TABLE smlouva ADD CONSTRAINT fk_smlouva_mec FOREIGN KEY (id_mec) REFERENCES mec (id_mec) ON DELETE CASCADE;
ALTER TABLE smlouva ADD CONSTRAINT fk_smlouva_subjekt FOREIGN KEY (id_subjekt) REFERENCES subjekt (id_subjekt) ON DELETE CASCADE;
ALTER TABLE smlouva ADD CONSTRAINT fk_smlouva_zamestanec FOREIGN KEY (zamestanec_id_subjekt) REFERENCES zamestanec (id_subjekt) ON DELETE CASCADE;

ALTER TABLE subjekt ADD CONSTRAINT fk_subjekt_adresa FOREIGN KEY (id_adresa) REFERENCES adresa (id_adresa) ON DELETE CASCADE;

ALTER TABLE zamestanec ADD CONSTRAINT fk_zamestanec_fyzicka_osoba FOREIGN KEY (id_subjekt) REFERENCES fyzicka_osoba (id_subjekt) ON DELETE CASCADE;

ALTER TABLE zamestanec_pribeh ADD CONSTRAINT fk_zamestanec_pribeh_zamestanec FOREIGN KEY (id_subjekt) REFERENCES zamestanec (id_subjekt) ON DELETE CASCADE;
ALTER TABLE zamestanec_pribeh ADD CONSTRAINT fk_zamestanec_pribeh_pribeh FOREIGN KEY (id_mec) REFERENCES pribeh (id_mec) ON DELETE CASCADE;