#include <cstring>
#include <cstdlib>
#include <cstdio>
#include <cassert>
#include <cctype>
#include <cmath>
#include <iostream>
#include <iomanip>
#include <sstream>
#include <set>
#include <list>
#include <map>
#include <vector>
#include <queue>
#include <string>
#include <algorithm>
#include <functional>
#include <memory>
#include <numeric>
#include <optional>
#include <variant>
#include <any>
#include <fstream>
#include "CFloat.h"
#include "CFloatBig.h"
#include "CInteger.h"
#include "CIntegerBig.h"
#include "CParsData.h"

static void testOfProgram() {
    CParsData x;
    std::ofstream history;
    history.open("text.txt");
    
    assert(x.parsingDate("2152151,2512521 + 215212,5125 * 21470 - 21521518", history));
    //4601243276.6262521
    assert(x.parsingDate("2125125125 + 2124124,21521 * 1242 - 215251,515 + (64 / 2)", history));
    //4763072180.77582

    assert(x.parsingDate("2142 / 2 + (- 2124 * 212 / 2 - 2124) -2141 + 214 / 2", history));
    //-228231

    assert(x.parsingDate("20184 + 21421 - 214 + (-21512 * 1512) + (36 / 6)", history));
    //-32484747

    assert(x.parsingDate("12412 * (212 + 212 / 2) + (2122 - 212) * 212", history));
    //assert(x.getRes() == "4351936");
    assert(x.parsingDate("12412*(212+212/2)+(2122-212)*212", history));
    //assert(x.getRes() == "4351936");
    assert(x.parsingDate("1 + 2*(3+4 / 2- (1+2)) * 2 + 1", history));
    //assert(x.getRes() == "10");
    assert(x.parsingDate("(4*(2*(3+5))+7-(8+8)+1)/2", history));
    //assert(x.getRes() == "28");
    assert(x.parsingDate("(3*0)+5*(6*3/3)", history));
    //assert(x.getRes() == "30");
    assert(x.parsingDate("215,5212 + 4212,22 * 251,5 - (2125 - 2152,21) + 215,21", history));
    //assert(x.getRes() == "1059831.2712");
    assert(x.parsingDate("(((2+3))) / 1 + 2 -3", history));
    //assert(x.getRes() == "4");
    assert(x.parsingDate("(1+5*0-3-4+5/5)*0*3/1", history));
    //assert(x.getRes() == "0");
    assert(x.parsingDate("(1+5*0-3-4+5/5) + 3 - 7 - (-7)", history));
    //assert(x.getRes() == "-2");
    assert(x.parsingDate("7 + 8 - 9 * 3 + 4*(-5 + 3 - 12 / 4) * 7 + 8 * 0", history));
    //assert(x.getRes() == "-152");
    assert(x.parsingDate("(25-4)/7+5*(12-3)", history));
    //assert(x.getRes() == "48");
    assert(x.parsingDate("A = 215,5212 + 4212,22 * 251,5 - (2125 - 2152,21) + 215,21", history));
    //assert(x.getRes() == "1059831.2712");
    assert(x.parsingDate("A + 214,512", history));
    //assert(x.parsingDate("(1+5)/0*1"));
    assert(x.parsingDate("8946389845829385293853859 + 32936533235235235232535232", history));
    //41882923081064620526389091
    assert(x.parsingDate("353453475347464586738467387464347563845738 + 28538467475645679845645986948576846584654654654", history));
    //28538820929121027310232725415964310932218500392
    assert(x.parsingDate("778476796843052983530496458796854907896087905480974975498579048579548978540974597894059784095 + 3982759834694634636738467438763846943764843786739467834768347863784683", history));
    //778476796843052983530500441556689602530724643948413739345522813423335718008809366241923568778
    assert(x.parsingDate("2581782675816726175261725861725617856217561257  - 2125167251725162571251521251521", history));
    //2581782675816724050094474136563046604696309736
    assert(x.parsingDate("389285638265836825963852639325 - 215222845838435434584349732875823795329523592935", history));
    //-215222845838435434195064094609986969365670953610
    assert(x.parsingDate("-2716572618726572167561785 + (-212957015829175071285102581052)", history));
    //-212959732401793797857270142837
    assert(x.parsingDate("981785792478938572383756827358238957826378 + 2815821825772165872172561256461784891727817895821905291025890182598195281982591859218598219258190", history));
    //2815821825772165872172561256461784891727817895821905292007675975077133854366348686576837177084568
    assert(x.parsingDate("-2192657192518276262176261625182 + 182651725861927587218572815215", history));
    //-2010005466656348674957688809967
    assert(x.parsingDate("8379867834976894587845887904879508497894 + (-29108257917285017825910782592837572753238538258329738527385792)", history));
    //-29108257917285017825902402725002595858650692370424859018887898
    assert(x.parsingDate("-2714721647261478261762476127461278 + 128751825781275812785718758217851792578190257128258175872598918", history));
    //128751825781275812785718758215137070930928778866495699745137640
    assert(x.parsingDate("332895978239572835782758783258923 * 2192051792571751925701975291501925701205215", history));
    //7297252258399825566090 36744947505834699553898053016426767893834986502883445
    //7297252258399825566090036744947505834699553898053016426767893834986502883445
    assert(x.parsingDate("716247617246712647126746127647126471278 * 0", history));
    //0
    assert(x.parsingDate("0 * 92195821958291859285918250981958210952152018219421", history));
    //0
    assert(x.parsingDate("83173825873582783592 * (-2819285618596821965819281925816592629128521)", history));
    //-234490771129068194175914310588790041012898944777628076298027432
    assert(x.parsingDate("-5197251925718752178521598 * (-51251251251952718572815278175827582)", history));
    //266365664264706875100846250546478455900290594980928911116036
    assert(x.parsingDate("-13296205928105892189258198259128582901 * 10953820958302983592593235235", history));
    //-145644259161198695345941949384396270979592415715145496164491716735
    assert(x.parsingDate("81962591562816251962851672582618521925 / 182795817825971258102517025790", history));
    //448383297

    //88195887027607124560264292295


    assert(x.parsingDate("-2891685691265291856219421412414214214214 / (-2190727519257017520519275214214214124)", history));
    //1319
    assert(x.parsingDate("2819682462189648291648261468219462198418902740174 / (-492184628196248948217804621421421)", history));
    //-5728912080255694
    assert(x.parsingDate("-27815725487154281745271845725184218482 / 21752491745721547215487512842", history));
    //-1278737434
    assert(x.parsingDate("98261829691825918259182752752969421846482194214 / 29107492179471024791270497120414421", history));
    //3375826027400
    assert(x.parsingDate("3375826027400 * 29107492179471024791270497120414421", history));
    //98261829691800237454521596492831754286101135400
    assert(x.parsingDate("98261829691825918259182752752969421846482194214 - 98261829691800237454521596492831754286101135400", history));
    //25680804661156260137667560381058814
    assert(x.parsingDate("0 / 8269184618946814482894124", history));
    //0
    //assert(x.parsingDate("2901825615268206581252910752971925710 / 0"));
    //warning!
    assert(x.parsingDate("62198478174987294178472874819724819748918,88214961924164729174267461724671247 + 29812789461264281984269462196428149,219642192486914286184296", history));
    //62198507987776755442754859089187016177068.10179181172856157792697061724671247
    assert(x.parsingDate("-819682629164862174647162846128468912468912,940712084710274912749172471824 + (-72147251724587154725847157824,7241672451862546146254174)", history));
    //-819682629164934321898887433283194759626737.664879329896529527374589871824
    assert(x.parsingDate("982168562981652918526185692816958126956928,52957180567182965162569186258162589 - 28169598169528651826591526819562295017295,950217957192075992501",history));
    //953998964812124266699594165997395831939632.57935384847975365912469186258162589
    assert(x.parsingDate("271672628164274812456128545521874728,2891642861846281964821964 - 72198654276147627861489264819648268416824618469298641864928641986248,741285745217452785472185427571254821", history));
    //-72198654276147627861489264819647996744196454194486185736383120111520.452121459032824588989989027571254821
    assert(x.parsingDate("-4092174029174247190472974129749210492142144421,2091479170924719042904721049414214421 + 29107491749274192749172491729407192479,1274891720497120479120794", history));
    //-4092174000066755441198781380576718762734951942.0816587450427598563783927049414214421
    assert(x.parsingDate("2901479207149274192074917204971947029174092794172947921421,482167482071846128648216846218064 + (-82164862149621846912864821684612846281,49821684261846281648194221)", history));
    //2901479207149274191992752342822325182261227972488335075139.983950639453383312166274636218064
    assert(x.parsingDate("21294861924148329173872189343242432,3902193729130217932143243 * 921740921740972194721042124,842174826184692184241", history));
    //19628345658311213649553862480933583169063407973628355741856300.9252837224322560047597540
    assert(x.parsingDate("281946281948216948621894621894682,9420719407921704927194712094709412 * 29174971947294712904790127492179472194790127490127904712094729017490,924719274917942790172947912794721904", history));
    //8225774866483275190461451207002995234929535711586097830508468946217950884373400466807501979831602938.471986918391384806250626937919038007
    assert(x.parsingDate("-291074972194729174927419072940,8472194871298748217847218468216498689421 * (-82164879628146826482168461284689216478921,7849219674621846281689426892164)", history));
    //23916140053146107148185778532350221343596969367743652861812655675949683.8099358432324390922995902880517975372867
}

int main() {
    
    //asserts for control program
    testOfProgram();
    
    std::string operaceCal;
    
    std::cout << "Welcome to calculation with unlimited accuracy!" << std::endl;
    
    CParsData x;
    std::ofstream history;
    history.open("text.txt");
    
    while(operaceCal != "konec") {
        std::getline(std::cin, operaceCal);

        if(x.parsingDate(operaceCal, history) == false)
            continue;
            //return EXIT_FAILURE;

        if(operaceCal != "konec")
            history << operaceCal << std::endl;

    }
    
    history.close();

    
    return EXIT_SUCCESS;
}
