#include <cstring>
#include <cstdlib>
#include <cstdio>
#include <cassert>
#include <cctype>
#include <cmath>
#include <iostream>
#include <iomanip>
#include <sstream>
#include <set>
#include <list>
#include <map>
#include <vector>
#include <queue>
#include <string>
#include <algorithm>
#include <functional>
#include <memory>
#include <numeric>
#include <optional>
#include <variant>
#include <any>
#include "CFloat.h"
#include "CFloatBig.h"
#include "CInteger.h"
#include "CIntegerBig.h"
#include "CParsData.h"
#include "CVariable.h"


int main() {
    
    std::string operaceCal;
    
    std::cout << "Welcome to calculation with unlimited accuracy!" << std::endl;
    
    CParsData x;
    CVariable var;
    
//    while(operaceCal != "konec") {
//        std::getline(std::cin, operaceCal);
//        
//        if(x.parsingDate(operaceCal) == false)
//            continue;
//            //return EXIT_FAILURE;
//        
//        std::cout << "Result: " << x.getRes() << std::endl;
//              
//    }
    
    assert(x.parsingDate("12412 * (212 + 212 / 2) + (2122 - 212) * 212"));
    //assert(x.getRes() == "4351936");
    assert(x.parsingDate("12412*(212+212/2)+(2122-212)*212"));
    //assert(x.getRes() == "4351936");
    assert(x.parsingDate("1 + 2*(3+4 / 2- (1+2)) * 2 + 1"));
    //assert(x.getRes() == "10");
    assert(x.parsingDate("(4*(2*(3+5))+7-(8+8)+1)/2"));
    //assert(x.getRes() == "28");
    assert(x.parsingDate("(3*0)+5*(6*3/3)"));
    //assert(x.getRes() == "30");
    assert(x.parsingDate("215,5212 + 4212,22 * 251,5 - (2125 - 2152,21) + 215,21"));
    //assert(x.getRes() == "1059831.2712");
    assert(x.parsingDate("(((2+3))) / 1 + 2 -3"));
    //assert(x.getRes() == "4");
    assert(x.parsingDate("(1+5*0-3-4+5/5)*0*3/1"));
    //assert(x.getRes() == "0");
    assert(x.parsingDate("(1+5*0-3-4+5/5) + 3 - 7 - (-7)"));
    //assert(x.getRes() == "-2");
    assert(x.parsingDate("7 + 8 - 9 * 3 + 4*(-5 + 3 - 12 / 4) * 7 + 8 * 0"));
    //assert(x.getRes() == "-152");
    assert(x.parsingDate("(25-4)/7+5*(12-3)"));
    //assert(x.getRes() == "48");
    assert(x.parsingDate("A = 215,5212 + 4212,22 * 251,5 - (2125 - 2152,21) + 215,21"));
    //assert(x.getRes() == "1059831.2712");
    assert(x.parsingDate("A + 214,512"));
    //assert(x.parsingDate("(1+5)/0*1"));
    assert(x.parsingDate("8946389845829385293853859 + 32936533235235235232535232"));
    //41882923081064620526389091
    assert(x.parsingDate("353453475347464586738467387464347563845738 + 28538467475645679845645986948576846584654654654"));
    //28538820929121027310232725415964310932218500392
    assert(x.parsingDate("778476796843052983530496458796854907896087905480974975498579048579548978540974597894059784095 + 3982759834694634636738467438763846943764843786739467834768347863784683"));
    //778476796843052983530500441556689602530724643948413739345522813423335718008809366241923568778
    assert(x.parsingDate("2581782675816726175261725861725617856217561257  - 2125167251725162571251521251521"));
    //2581782675816724050094474136563046604696309736
    assert(x.parsingDate("389285638265836825963852639325 - 215222845838435434584349732875823795329523592935"));
    //-215222845838435434195064094609986969365670953610
    assert(x.parsingDate("-2716572618726572167561785 + (-212957015829175071285102581052)"));
    //-212959732401793797857270142837
    assert(x.parsingDate("981785792478938572383756827358238957826378 + 2815821825772165872172561256461784891727817895821905291025890182598195281982591859218598219258190"));
    //2815821825772165872172561256461784891727817895821905292007675975077133854366348686576837177084568
    assert(x.parsingDate("-2192657192518276262176261625182 + 182651725861927587218572815215"));
    //-2010005466656348674957688809967
    assert(x.parsingDate("8379867834976894587845887904879508497894 + (-29108257917285017825910782592837572753238538258329738527385792)"));
    //-29108257917285017825902402725002595858650692370424859018887898
    assert(x.parsingDate("-2714721647261478261762476127461278 + 128751825781275812785718758217851792578190257128258175872598918"));
    //128751825781275812785718758215137070930928778866495699745137640
    assert(x.parsingDate("332895978239572835782758783258923 * 2192051792571751925701975291501925701205215"));
    //729725225839982556609036744947505834699553898053016426767893834986502883445
    //729725225839982556609036744947505834699553898053016426767893834986502883445
    assert(x.parsingDate("716247617246712647126746127647126471278 * 0"));
    //0
    assert(x.parsingDate("0 * 92195821958291859285918250981958210952152018219421"));
    //0
    assert(x.parsingDate("83173825873582783592 * (-2819285618596821965819281925816592629128521)"));
    //-234490771129068194175914310588790041012898944777628076298027432
    assert(x.parsingDate("-5197251925718752178521598 * (-51251251251952718572815278175827582)"));
    //266365664264706875100846250546478455900290594980928911116036
    assert(x.parsingDate("-13296205928105892189258198259128582901 * 10953820958302983592593235235"));
    //-145644259161198695345941949384396270979592415715145496164491716735
    
    return EXIT_SUCCESS;
}
